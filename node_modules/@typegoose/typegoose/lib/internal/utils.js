"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deprecate = exports.isConstructor = exports.getType = exports.assertionIsClass = exports.assertion = exports.createArrayFromDimensions = exports.assignGlobalModelOptions = exports.isNullOrUndefined = exports.warnMixed = exports.mapOptions = exports.mapArrayOptions = exports.isNotDefined = exports.getName = exports.getRightTarget = exports.mergeSchemaOptions = exports.mergeMetadata = exports.assignMetadata = exports.includesAllVirtualPOP = exports.allVirtualoptions = exports.isWithVirtualPOP = exports.isWithNumberValidate = exports.isWithStringTransform = exports.isWithStringValidate = exports.getClass = exports.getClassForDocument = exports.initProperty = exports.isString = exports.isNumber = exports.isObject = exports.isAnRefType = exports.isPrimitive = void 0;
const lodash_1 = require("lodash");
const mongoose = require("mongoose");
const logSettings_1 = require("../logSettings");
const constants_1 = require("./constants");
const data_1 = require("./data");
const errors_1 = require("./errors");
/**
 * Returns true, if the type is included in mongoose.Schema.Types
 * @param Type The Type
 * @returns true, if it includes it
 */
function isPrimitive(Type) {
    if (typeof (Type === null || Type === void 0 ? void 0 : Type.name) === 'string') {
        // try to match "Type.name" with all the Property Names of "mongoose.Schema.Types"
        // (like "String" with "mongoose.Schema.Types.String")
        return (Object.getOwnPropertyNames(mongoose.Schema.Types).includes(Type.name) ||
            // try to match "Type.name" with all "mongoose.Schema.Types.*.name"
            // (like "SchemaString" with "mongoose.Schema.Types.String.name")
            Object.values(mongoose.Schema.Types).findIndex((v) => v.name === Type.name) >= 0);
    }
    return false;
}
exports.isPrimitive = isPrimitive;
/**
 * Returns true, if the type is included in mongoose.Schema.Types except the aliases
 * @param Type The Type
 * @returns true, if it includes it
 */
function isAnRefType(Type) {
    if (typeof (Type === null || Type === void 0 ? void 0 : Type.name) === 'string') {
        // Note: this is not done "once" because types can be added as custom types
        const tmp = Object.getOwnPropertyNames(mongoose.Schema.Types).filter((x) => {
            switch (x) {
                case 'Oid':
                case 'Bool':
                case 'Object':
                case 'Boolean':
                    return false;
                default:
                    return true;
            }
        });
        // try to match "Type.name" with all the Property Names of "mongoose.Schema.Types" except the ones with aliases
        // (like "String" with "mongoose.Schema.Types.String")
        return (tmp.includes(Type.name) ||
            // try to match "Type.name" with all "mongoose.Schema.Types.*.name"
            // (like "SchemaString" with "mongoose.Schema.Types.String.name")
            Object.values(mongoose.Schema.Types).findIndex((v) => v.name === Type.name) >= 0);
    }
    return false;
}
exports.isAnRefType = isAnRefType;
/**
 * Returns true, if it is an Object
 * @param Type The Type
 * @param once Just run it once?
 * @returns true, if it is an Object
 */
function isObject(Type, once = false) {
    if (typeof (Type === null || Type === void 0 ? void 0 : Type.name) === 'string') {
        let prototype = Type.prototype;
        let name = Type.name;
        while (name) {
            if (name === 'Object' || name === 'Mixed') {
                return true;
            }
            if (once) {
                break;
            }
            prototype = Object.getPrototypeOf(prototype);
            name = prototype === null || prototype === void 0 ? void 0 : prototype.constructor.name;
        }
    }
    return false;
}
exports.isObject = isObject;
/**
 * Returns true, if it is an Number
 * @param Type The Type
 * @returns true, if it is an Number
 */
function isNumber(Type) {
    var _a;
    const name = (_a = Type === null || Type === void 0 ? void 0 : Type.name) !== null && _a !== void 0 ? _a : '';
    return name === 'Number' || name === mongoose.Schema.Types.Number.name;
}
exports.isNumber = isNumber;
/**
 * Returns true, if it is an String
 * @param Type The Type
 * @returns true, if it is an String
 */
function isString(Type) {
    var _a;
    const name = (_a = Type === null || Type === void 0 ? void 0 : Type.name) !== null && _a !== void 0 ? _a : '';
    return name === 'String' || name === mongoose.Schema.Types.String.name;
}
exports.isString = isString;
/**
 * Initialize the property in the schemas Map
 * @param name Name of the current Model/Class
 * @param key Key of the property
 * @param whatis What should it be for a type?
 */
function initProperty(name, key, whatis) {
    const schemaProp = !data_1.schemas.has(name) ? data_1.schemas.set(name, {}).get(name) : data_1.schemas.get(name);
    switch (whatis) {
        case constants_1.WhatIsIt.ARRAY:
            schemaProp[key] = [{}];
            break;
        case constants_1.WhatIsIt.MAP:
        case constants_1.WhatIsIt.NONE:
            schemaProp[key] = {};
            break;
        default:
            /* istanbul ignore next */ // ignore because this case should really never happen (typescript prevents this)
            throw new TypeError('"whatis" is not supplied OR doesn\'t have a case yet!');
    }
    return schemaProp;
}
exports.initProperty = initProperty;
/**
 * Get the Class for a given Document
 * @param document The Document
 */
function getClassForDocument(document) {
    const modelName = document.constructor.modelName;
    return data_1.constructors.get(modelName);
}
exports.getClassForDocument = getClassForDocument;
/**
 * Get the Class for a given Schema
 * @param input
 */
function getClass(input) {
    if (typeof input === 'string') {
        return data_1.constructors.get(input);
    }
    if (typeof (input === null || input === void 0 ? void 0 : input.typegooseName) === 'string') {
        return data_1.constructors.get(input.typegooseName);
    }
    if (typeof (input === null || input === void 0 ? void 0 : input.typegooseName) === 'function') {
        return data_1.constructors.get(input.typegooseName());
    }
    throw new ReferenceError('Input was not a string AND didnt have a .typegooseName function AND didnt have a .typegooseName string');
}
exports.getClass = getClass;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
function isWithStringValidate(options) {
    var _a, _b;
    return !isNullOrUndefined((_b = (_a = options.match) !== null && _a !== void 0 ? _a : options.minlength) !== null && _b !== void 0 ? _b : options.maxlength);
}
exports.isWithStringValidate = isWithStringValidate;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
function isWithStringTransform(options) {
    var _a, _b;
    return !isNullOrUndefined((_b = (_a = options.lowercase) !== null && _a !== void 0 ? _a : options.uppercase) !== null && _b !== void 0 ? _b : options.trim);
}
exports.isWithStringTransform = isWithStringTransform;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
function isWithNumberValidate(options) {
    var _a;
    return !isNullOrUndefined((_a = options.min) !== null && _a !== void 0 ? _a : options.max);
}
exports.isWithNumberValidate = isWithNumberValidate;
const virtualOptions = ['localField', 'foreignField'];
/**
 * Check if Options include Virtual Populate Options
 * @param options RawOptions of the Prop
 */
function isWithVirtualPOP(options) {
    return Object.keys(options).some((v) => virtualOptions.includes(v));
}
exports.isWithVirtualPOP = isWithVirtualPOP;
exports.allVirtualoptions = virtualOptions.slice(0); // copy "virtualOptions" array
exports.allVirtualoptions.push('ref');
/**
 * Check if All the required Options are present
 * @param options RawOptions of the Prop
 */
function includesAllVirtualPOP(options) {
    return exports.allVirtualoptions.every((v) => Object.keys(options).includes(v));
}
exports.includesAllVirtualPOP = includesAllVirtualPOP;
/**
 * Merge value & existing Metadata & Save it to the class
 * Difference with "mergeMetadata" is that this one DOES save it to the class
 * @param key Metadata key
 * @param value Raw value
 * @param cl The constructor
 * @internal
 */
function assignMetadata(key, value, cl) {
    if (isNullOrUndefined(value)) {
        return value;
    }
    const newValue = mergeMetadata(key, value, cl);
    Reflect.defineMetadata(key, newValue, cl);
    return newValue;
}
exports.assignMetadata = assignMetadata;
/**
 * Merge value & existing Metadata
 * Difference with "assignMetadata" is that this one DOES NOT save it to the class
 * @param key Metadata key
 * @param value Raw value
 * @param cl The constructor
 * @internal
 */
function mergeMetadata(key, value, cl) {
    assertion(typeof key === 'string', new TypeError(`"${key}"(key) is not a string! (mergeMetadata)`));
    assertionIsClass(cl);
    // Please don't remove the other values from the function, even when unused - it is made to be clear what is what
    return lodash_1.mergeWith({}, Reflect.getMetadata(key, cl), value, (_objValue, srcValue, ckey, _object, _source, _stack) => customMerger(ckey, srcValue));
}
exports.mergeMetadata = mergeMetadata;
/**
 * Used for lodash customizer's (cloneWith, cloneDeepWith, mergeWith)
 * @param key the key of the current object
 * @param val the value of the object that should get returned for "existingMongoose" & "existingConnection"
 */
function customMerger(key, val) {
    if (typeof key !== 'string') {
        return undefined;
    }
    if (/^(existingMongoose|existingConnection)$/.test(key)) {
        return val;
    }
    return undefined;
}
/**
 * Merge only schemaOptions from ModelOptions of the class
 * @param value The value to use
 * @param cl The Class to get the values from
 */
function mergeSchemaOptions(value, cl) {
    return mergeMetadata(constants_1.DecoratorKeys.ModelOptions, { schemaOptions: value }, cl).schemaOptions;
}
exports.mergeSchemaOptions = mergeSchemaOptions;
/**
 * Tries to return the right target
 * if target.constructor.name is "Function", return target, otherwise target.constructor
 * @param target The target to determine
 */
function getRightTarget(target) {
    var _a;
    return ((_a = target.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Function' ? target : target.constructor;
}
exports.getRightTarget = getRightTarget;
/**
 * Get the correct name of the class's model
 * (with suffix)
 * @param cl The Class
 */
function getName(cl) {
    var _a, _b, _c, _d, _e, _f;
    const ctor = getRightTarget(cl);
    const options = (_a = Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, ctor)) !== null && _a !== void 0 ? _a : {};
    const baseName = ctor.name;
    if ((_b = options.options) === null || _b === void 0 ? void 0 : _b.automaticName) {
        const suffix = (_d = (_c = options.options) === null || _c === void 0 ? void 0 : _c.customName) !== null && _d !== void 0 ? _d : (_e = options.schemaOptions) === null || _e === void 0 ? void 0 : _e.collection;
        return !isNullOrUndefined(suffix) ? `${baseName}_${suffix}` : baseName;
    }
    if (typeof ((_f = options.options) === null || _f === void 0 ? void 0 : _f.customName) === 'string') {
        if (options.options.customName.length <= 0) {
            throw new TypeError(`"customName" must be a string AND at least one character ("${baseName}")`);
        }
        return options.options.customName;
    }
    return baseName;
}
exports.getName = getName;
/**
 * Returns if it is not defined in "schemas"
 * @param cl The Type
 */
function isNotDefined(cl) {
    return (typeof cl === 'function'
        && !isPrimitive(cl)
        && cl !== Object
        && !data_1.schemas.has(getName(cl)));
}
exports.isNotDefined = isNotDefined;
/**
 * Map Options to "inner" & "outer"
 * -> inner: means inner of "type: [{here})"
 * -> outer: means outer of "type: [{}], here"
 *
 * Specific to Arrays
 * @param rawOptions The raw options
 * @param Type The Type of the array
 * @param target The Target class
 * @param pkey Key of the Property
 * @param loggerType Type to use for logging
 */
function mapArrayOptions(rawOptions, Type, target, pkey, loggerType) {
    logSettings_1.logger.debug('mapArrayOptions called');
    loggerType = loggerType !== null && loggerType !== void 0 ? loggerType : Type;
    if (!(Type instanceof mongoose.Schema)) {
        loggerType = Type;
    }
    const mapped = mapOptions(rawOptions, Type, target, pkey, loggerType);
    /** The Object that gets returned */
    const returnObject = Object.assign(Object.assign({}, mapped.outer), { type: [
            Object.assign({ type: Type }, mapped.inner)
        ] });
    returnObject.type = createArrayFromDimensions(rawOptions, returnObject.type, getName(target), pkey);
    if (loggerType) {
        logSettings_1.logger.debug('(Array) Final mapped Options for Type "%s"', getName(loggerType), returnObject);
    }
    return returnObject;
}
exports.mapArrayOptions = mapArrayOptions;
/**
 * Map Options to "inner" & "outer"
 * @param rawOptions The raw options
 * @param Type The Type of the array
 * @param target The Target class
 * @param pkey Key of the Property
 * @param loggerType Type to use for logging
 */
function mapOptions(rawOptions, Type, target, pkey, loggerType) {
    var _a;
    logSettings_1.logger.debug('mapOptions called');
    loggerType = loggerType !== null && loggerType !== void 0 ? loggerType : Type;
    /** The Object that gets returned */
    const ret = {
        inner: {},
        outer: {}
    };
    if (!(Type instanceof mongoose.Schema)) {
        loggerType = Type;
        if (getName(loggerType) in mongoose.Schema.Types) {
            logSettings_1.logger.info('Converting "%s" to mongoose Type', getName(loggerType));
            Type = mongoose.Schema.Types[getName(loggerType)];
            /* istanbul ignore next */
            if (Type === mongoose.Schema.Types.Mixed) {
                warnMixed(target, pkey);
            }
        }
    }
    if (isNullOrUndefined(loggerType)) {
        logSettings_1.logger.info('mapOptions loggerType is undefined!');
    }
    /** The OptionsConstructor to use */
    let OptionsCTOR = (_a = Type === null || Type === void 0 ? void 0 : Type.prototype) === null || _a === void 0 ? void 0 : _a.OptionsConstructor;
    // Fix because "Schema" is not a valid type and doesn't have a ".prototype.OptionsConstructor"
    if (Type instanceof mongoose.Schema) {
        // TODO: remove "as any" cast if "OptionsConstructor" is implemented in @types/mongoose
        OptionsCTOR = mongoose.Schema.Types.Embedded.prototype.OptionsConstructor;
    }
    if (isNullOrUndefined(OptionsCTOR)) {
        throw new TypeError(`Type does not have an valid "OptionsConstructor"! (${getName(loggerType)} on ${getName(target)}.${pkey})`);
    }
    const options = Object.assign({}, rawOptions); // for sanity
    delete options.items;
    // "mongoose as any" is because the types package does not yet have an entry for "SchemaTypeOptions"
    // TODO: remove "as any" cast if "OptionsConstructor" is implemented in @types/mongoose
    if (OptionsCTOR.prototype instanceof mongoose.SchemaTypeOptions) {
        for (const [key, value] of Object.entries(options)) {
            if (Object.getOwnPropertyNames(OptionsCTOR.prototype).includes(key)) {
                ret.inner[key] = value;
            }
            else {
                ret.outer[key] = value;
            }
        }
    }
    else {
        if (loggerType) {
            logSettings_1.logger.info('The Type "%s" has a property "OptionsConstructor" but it does not extend "SchemaTypeOptions"', getName(loggerType));
        }
        ret.outer = options;
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.innerOptions) === 'object') {
        delete ret.outer.innerOptions;
        for (const [key, value] of Object.entries(options.innerOptions)) {
            ret.inner[key] = value;
        }
    }
    if (typeof (options === null || options === void 0 ? void 0 : options.outerOptions) === 'object') {
        delete ret.outer.outerOptions;
        for (const [key, value] of Object.entries(options.outerOptions)) {
            ret.outer[key] = value;
        }
    }
    if (loggerType) {
        logSettings_1.logger.debug('Final mapped Options for Type "%s"', getName(loggerType), ret);
    }
    return ret;
}
exports.mapOptions = mapOptions;
/**
 * Warn, Error or Allow if an mixed type is set
 * -> this function exists for de-duplication
 * @param target Target Class
 * @param key Property key
 */
function warnMixed(target, key) {
    var _a, _b;
    const name = getName(target);
    const modelOptions = (_a = Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, getRightTarget(target))) !== null && _a !== void 0 ? _a : {};
    switch ((_b = modelOptions.options) === null || _b === void 0 ? void 0 : _b.allowMixed) {
        default:
        case constants_1.Severity.WARN:
            logSettings_1.logger.warn('Setting "Mixed" for property "%s.%s"\nLook here for how to disable this message: https://typegoose.github.io/typegoose/docs/api/decorators/modelOptions/#allowmixed', name, key);
            break;
        case constants_1.Severity.ALLOW:
            break;
        case constants_1.Severity.ERROR:
            throw new TypeError(`Setting "Mixed" is not allowed! (${name}, ${key})`);
    }
    return; // always return, if "allowMixed" is not "ERROR"
}
exports.warnMixed = warnMixed;
/**
 * Because since node 4.0.0 the internal util.is* functions got deprecated
 * @param val Any value to test if null or undefined
 */
function isNullOrUndefined(val) {
    return val === null || val === undefined;
}
exports.isNullOrUndefined = isNullOrUndefined;
/**
 * Assign Global ModelOptions if not already existing
 * @param target Target Class
 */
function assignGlobalModelOptions(target) {
    if (isNullOrUndefined(Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, target))) {
        logSettings_1.logger.info('Assigning global Schema Options to "%s"', getName(target));
        assignMetadata(constants_1.DecoratorKeys.ModelOptions, lodash_1.omit(data_1.globalOptions, 'globalOptions'), target);
    }
}
exports.assignGlobalModelOptions = assignGlobalModelOptions;
/**
 * Loop over "dimensions" and create an array from that
 * @param rawOptions baseProp's rawOptions
 * @param extra What is actually in the deepest array
 * @param name name of the target for better error logging
 * @param key key of target-key for better error logging
 */
function createArrayFromDimensions(rawOptions, extra, name, key) {
    // dimensions start at 1 (not 0)
    const dim = typeof rawOptions.dim === 'number' ? rawOptions.dim : 1;
    if (dim < 1) {
        throw new RangeError(`"dim" needs to be higher than 0 (${name}.${key})`);
    }
    delete rawOptions.dim; // delete this property to not actually put it as an option
    logSettings_1.logger.info('createArrayFromDimensions called with %d dimensions', dim);
    let retArray = Array.isArray(extra) ? extra : [extra];
    // index starts at 1 because "retArray" is already once wrapped in an array
    for (let index = 1; index < dim; index++) {
        retArray = [retArray];
    }
    return retArray;
}
exports.createArrayFromDimensions = createArrayFromDimensions;
/**
 * Assert an condition, if "false" throw error
 * Note: it is not named "assert" to differentiate between node and jest types
 * @param cond The Condition to throw
 * @param error An Custom Error to throw
 */
function assertion(cond, error) {
    if (!cond) {
        throw error !== null && error !== void 0 ? error : new Error('Assert failed - no custom error');
    }
}
exports.assertion = assertion;
/**
 * Assert if val is an function (constructor for classes)
 * @param val Value to test
 */
function assertionIsClass(val) {
    assertion(typeof val === 'function', new errors_1.NoValidClass(val));
}
exports.assertionIsClass = assertionIsClass;
/**
 * Get Type, if input is an arrow-function, execute it and return the result
 * @param typeOrFunc Function or Type
 */
function getType(typeOrFunc) {
    if (typeof typeOrFunc === 'function' && !isConstructor(typeOrFunc)) {
        return typeOrFunc();
    }
    return typeOrFunc;
}
exports.getType = getType;
/**
 * Is the provided input an class with an constructor?
 */
function isConstructor(obj) {
    var _a, _b;
    return !isNullOrUndefined((_b = (_a = obj === null || obj === void 0 ? void 0 : obj.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name);
}
exports.isConstructor = isConstructor;
// Below are function to wrap NodeJS functions for client compatability (tsline ignore is needed)
/**
 * Execute util.deprecate or when !process console log
 * (if client, it dosnt cache which codes already got logged)
 */
/* tslint:disable-next-line:ban-types */
function deprecate(fn, message, code) {
    if (!isNullOrUndefined(process)) {
        /* tslint:disable-next-line:no-require-imports */
        return require('util').deprecate(fn, message, code);
    }
    /* tslint:disable-next-line:no-console */
    console.log(`[${code}] DeprecationWarning: ${message}`);
    return fn;
}
exports.deprecate = deprecate;
//# sourceMappingURL=data:application/json;base64,